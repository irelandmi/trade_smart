name: Deploy data pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - DEV
          - QA
          - PROD
        default: 'DEV'

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REPO_NAME: "GIT_DEV.GIT.TRADE_SMART"
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: "./config.toml"

      - name: Print working directory
        run: pwd

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            case "${{ github.ref_name }}" in
              "main")
                echo "DEPLOY_ENV=PROD" >> $GITHUB_ENV
                ;;
              "qa")
                echo "DEPLOY_ENV=QA" >> $GITHUB_ENV
                ;;
              "dev")
                echo "DEPLOY_ENV=DEV" >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: Configure Snowflake CLI Connection
        run: |
          snow connection test

      - name: Create database
        run: |
          snow object create database name=${{ env.DEPLOY_ENV }} comment="Created with Snowflake CLI" --if-not-exists

      - name: Create schema
        run: |
          snow object create schema name="RAW" comment="Created with Snowflake CLI" --database ${{ env.DEPLOY_ENV }} --if-not-exists

      - name: Fetch repository changes
        run: snow git fetch "${REPO_NAME}"

      - name: Deploy data pipeline to ${{ env.DEPLOY_ENV }}
        run: |
          case "${{ env.DEPLOY_ENV }}" in
            "PROD")
              RETENTION_TIME=1
              BRANCH="main"
              ;;
            "QA")
              RETENTION_TIME=0
              BRANCH="main"
              ;;
            "DEV")
              RETENTION_TIME=0
              BRANCH="main"
              ;;
          esac

          snow git execute \
            "@${{ env.REPO_NAME }}/branches/main/datawarehouse/git_pipeline/steps/*" --verbose --database "${{ env.REPO_NAME }}" \
            -D "environment='${{ env.DEPLOY_ENV }}'" \
            -D "retention_time=${RETENTION_TIME}"
